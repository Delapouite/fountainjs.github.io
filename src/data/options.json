[
  {
    "title": "Web Framework",
    "values": [
      {
        "name": "React",
        "logo": "/assets/imgs/react.png",
        "description": [
          "### Just The UI",
          "Lots of people use React as the V in MVC. Since React makes no assumptions about the rest of your technology stack, it's easy to try it out on a small feature in an existing project.",
          "### Virtual DOM",
          "React abstracts away the DOM, giving a simpler programming model and better performance. React can also render on the server using Node, and it can power native apps using React Native.",
          "### Data Flow",
          "React implements one-way reactive data flow which reduces boilerplate and is easier to reason about than traditional data binding."
        ]
      },
      {
        "name": "Angular 1",
        "logo": "/assets/imgs/angular1.png",
        "description": [
          "### Why AngularJS?",
          "HTML is great for declaring static documents, but it falters when we try to use it for declaring dynamic views in web-applications. AngularJS lets you extend HTML vocabulary for your application. The resulting environment is extraordinarily expressive, readable, and quick to develop.",
          "### Alternatives",
          "Other frameworks deal with HTML’s shortcomings by either abstracting away HTML, CSS, and/or JavaScript or by providing an imperative way for manipulating the DOM. Neither of these address the root problem that HTML was not designed for dynamic views.",
          "### Extensibility",
          "AngularJS is a toolset for building the framework most suited to your application development. It is fully extensible and works well with other libraries. Every feature can be modified or replaced to suit your unique development workflow and feature needs. Read on to find out how."
        ]
      },
      {
        "name": "Angular 2",
        "logo": "/assets/imgs/angular2.png",
        "description": [
          "### Develop Across All Platforms",
          "Learn one way to build applications with Angular and reuse your code and abilities to build apps for any deployment target. For web, mobile web, native mobile and native desktop.",
          "### Speed & Performance",
          "Achieve the maximum speed possible on the Web Platform today, and take it further, via Web Workers and server-side rendering.",
          "",
          "Angular puts you in control over scalability. Meet huge data requirements by building data models on RxJS, Immutable.js or another push-model.",
          "### Incredible Tooling",
          "Build features quickly with simple, declarative templates. Extend the template language with your own components and use a wide array of existing components. Get immediate Angular-specific help and feedback with nearly every IDE and editor. All this comes together so you can focus on building amazing apps rather than trying to make the code work."
        ]
      }
    ]
  },
  {
    "title": "Module management",
    "values": [
      {
        "name": "Webpack and NPM",
        "logo": "/assets/imgs/webpack.png",
        "description": [
          "### Why another module bundler?",
          "Existing module bundlers are not well suited for big projects (big single page applications). The most pressing reason for developing another module bundler was Code Splitting and that static assets should fit seamlessly together through modularization.",
          "",
          "I tried to extend existing module bundlers, but it wasn’t possible to achieve all goals.",
          "### Goals",
          "- Split the dependency tree into chunks loaded on demand",
          "- Keep initial loading time low",
          "- Every static asset should be able to be a module",
          "- Ability to integrate 3rd-party libraries as modules",
          "- Ability to customize nearly every part of the module bundler",
          "- Suited for big projects"
        ]
      },
      {
        "name": "SystemJS and JSPM",
        "logo": "/assets/imgs/systemjs.png",
        "description": [
          "Universal dynamic module loader - loads ES6 modules, AMD, CommonJS and global scripts in the browser and NodeJS. Works with both Traceur and Babel.",
          "",
          "- Loads any module format with exact circular reference and binding support.",
          "- Loads ES6 modules compiled into the System.register bundle format for production, maintaining circular references support.",
          "- Supports RequireJS-style map, paths, bundles and global shims.",
          "- Loader plugins allow loading assets through the module naming system such as CSS, JSON or images."
        ]
      },
      {
        "name": "No modules and Bower",
        "logo": "/assets/imgs/bower.png",
        "description": [
          "Web sites are made of lots of things — frameworks, libraries, assets, and utilities. Bower manages all these things for you.",
          "",
          "Keeping track of all these packages and making sure they are up to date (or set to the specific versions you need) is tricky. Bower to the rescue!",
          "",
          "Bower can manage components that contain HTML, CSS, JavaScript, fonts or even image files. Bower doesn’t concatenate or minify code or do anything else - it just installs the right versions of the packages you need and their dependencies."
        ]
      }
    ]
  }
]
